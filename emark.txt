# Evermark Protocol Frontend Update Strategy

## Overview
We've significantly updated the backend smart contract architecture from the original implementation to a more sophisticated 8-contract system. This requires systematic frontend updates to integrate with the new contracts while maintaining existing functionality.

## Backend Changes Summary
- **Original**: Simple NFT + basic staking system
- **New**: 8-contract architecture with advanced tokenomics
  - EvermarkNFT: Enhanced NFT contract with metadata
  - CardCatalog: EMARK token staking (wrap/unwrap mechanism)
  - EvermarkVoting: Weekly voting cycles with delegation
  - EvermarkRewards: Sophisticated reward distribution
  - EvermarkLeaderboard: Automated ranking system
  - EvermarkAuction: NFT marketplace with Dutch auctions
  - NFTStaking: Utility staking for NFTs with lock periods
  - FeeCollector: Protocol revenue management

## Frontend Update Strategy

### Phase 1: Hooks Layer (CURRENT)
**Status**: In Progress
**Goal**: Update all hooks to work with new contract ABIs and addresses

#### Completed:
- ✅ Added AUCTION_ABI export to contracts.ts
- ✅ Fixed useNftStaking.ts TypeScript errors
- ✅ Created new hooks: useEmarkToken, useFeeCollector

#### Next Steps:
1. **Test existing hooks one by one**:
   - useVoting.ts - Test delegation functionality
   - useStaking.ts - Test EMARK staking (wrap/unwrap)
   - useRewards.ts - Test reward claiming
   - useAuctions.ts - Test auction browsing/bidding
   - useLeaderboard.ts - Test leaderboard data
   - useEvermarks.ts - Test NFT fetching
   - useEvermarkCreation.ts - Test NFT minting

2. **Add missing ABI exports** as needed:
   - NFT_STAKING_ABI
   - FEE_COLLECTOR_ABI
   - EMARK_TOKEN_ABI (ERC20)

### Phase 2: Component Layer
**Goal**: Update React components to use new hook functionality

#### Priority Order:
1. **Core Components** (High Priority):
- Wallet connection components
- Evermark browsing/display
- Basic staking interface
- Reward claiming

2. **Enhanced Components** (Medium Priority):
- Voting/delegation interface
- Leaderboard display
- Auction browsing
- NFT creation flow

3. **New Components** (Low Priority):
- NFT staking interface
- Fee collector dashboard
- Advanced analytics

### Phase 3: Page Layer
**Goal**: Update page-level components and routing

#### Pages to Update:
- Home page - Update stats and overview
- Browse page - Ensure NFT listing works
- Create page - Test minting flow
- Profile page - Add staking/voting features
- Leaderboard page - Connect to new contract
- Auctions page - Test marketplace functionality

### Phase 4: Integration & Testing
**Goal**: End-to-end testing and polish

#### Testing Checklist:
- [ ] Wallet connection works
- [ ] NFT browsing loads correctly
- [ ] NFT creation/minting works
- [ ] EMARK token staking (wrap/unwrap)
- [ ] Voting delegation
- [ ] Reward claiming
- [ ] Leaderboard display
- [ ] Auction browsing/bidding
- [ ] NFT staking (new feature)

## Development Workflow

### Current Session Plan:
1. **Test hooks individually** - Run through each hook's functionality
2. **Fix import/export issues** - Add missing ABIs as needed
3. **Verify contract connections** - Ensure all addresses are correct
4. **Document issues** - Track what works vs. what needs fixes

### File-by-File Approach:
src/hooks/ ├── useVoting.ts ← Test delegation ├── useStaking.ts ← Test EMARK staking
├── useRewards.ts ← Test reward claiming ├── useAuctions.ts ← Test auction data ├── useLeaderboard.ts ← Test rankings ├── useEvermarks.ts ← Test NFT fetching ├── useEvermarkCreation.ts ← Test minting ├── useNftStaking.ts ← Test NFT staking (new) ├── useEmarkToken.ts ← Test token operations (new) └── useFeeCollector.ts ← Test fee data (new)


### Error Tracking:
- **Import/Export Errors**: Missing ABI exports
- **Contract Errors**: Wrong addresses or ABI mismatches  
- **Logic Errors**: Changed contract interfaces
- **Type Errors**: Updated return types from contracts

## Key Differences to Watch For

### Staking Changes:
- **Old**: Direct token staking
- **New**: Wrap/unwrap mechanism (CardCatalog contract)
- **Impact**: Update staking UI to show wrapped tokens

### Voting Changes:
- **Old**: Simple voting
- **New**: Weekly cycles with delegation
- **Impact**: Add cycle tracking and delegation UI

### Rewards Changes:
- **Old**: Basic reward distribution
- **New**: Multi-stream rewards (stakers + creators)
- **Impact**: Update reward display and claiming

### NFT Changes:
- **Old**: Basic NFT minting
- **New**: Enhanced metadata + staking utility
- **Impact**: Add NFT staking features

## Success Metrics
- [ ] All existing features work with new contracts
- [ ] No console errors during normal usage
- [ ] New features (NFT staking, enhanced voting) are accessible
- [ ] Performance is maintained or improved
- [ ] User experience is smooth and intuitive

## Next Steps After Frontend Update
1. Deploy to staging environment
2. Comprehensive testing with real transactions
3. User acceptance testing
4. Production deployment
5. Documentation updates

---
**Note**: This is a living document. Update as we discover issues and make progress.