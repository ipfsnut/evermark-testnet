// src/components/meta/EvermarkMetaTags.tsx - Client-side meta tag generation
import React, { useEffect } from 'react';

interface EvermarkMetaTagsProps {
  evermark: {
    id: string;
    name: string;
    description: string;
    author: string;
    image?: string;
  };
}

export const EvermarkMetaTags: React.FC<EvermarkMetaTagsProps> = ({ evermark }) => {
  useEffect(() => {
    // Update document title
    document.title = `${evermark.name} | Evermark`;
    
    // Update meta description
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.setAttribute('content', evermark.description);
    } else {
      const meta = document.createElement('meta');
      meta.name = 'description';
      meta.content = evermark.description;
      document.head.appendChild(meta);
    }
    
    // Update Open Graph tags
    const updateOGTag = (property: string, content: string) => {
      let tag = document.querySelector(`meta[property="${property}"]`);
      if (tag) {
        tag.setAttribute('content', content);
      } else {
        tag = document.createElement('meta');
        tag.setAttribute('property', property);
        tag.setAttribute('content', content);
        document.head.appendChild(tag);
      }
    };
    
    updateOGTag('og:title', evermark.name);
    updateOGTag('og:description', evermark.description);
    updateOGTag('og:type', 'article');
    updateOGTag('og:url', window.location.href);
    
    if (evermark.image) {
      updateOGTag('og:image', evermark.image);
    } else {
      // Generate dynamic OG image
      const ogImageUrl = `${window.location.origin}/.netlify/functions/og-image?title=${encodeURIComponent(evermark.name)}&author=${encodeURIComponent(evermark.author)}`;
      updateOGTag('og:image', ogImageUrl);
    }
    
    // Twitter Card tags
    const updateTwitterTag = (name: string, content: string) => {
      let tag = document.querySelector(`meta[name="${name}"]`);
      if (tag) {
        tag.setAttribute('content', content);
      } else {
        tag = document.createElement('meta');
        tag.setAttribute('name', name);
        tag.setAttribute('content', content);
        document.head.appendChild(tag);
      }
    };
    
    updateTwitterTag('twitter:card', 'summary_large_image');
    updateTwitterTag('twitter:title', evermark.name);
    updateTwitterTag('twitter:description', evermark.description);
    
    if (evermark.image) {
      updateTwitterTag('twitter:image', evermark.image);
    }
    
  }, [evermark]);
  
  return null; // This component doesn't render anything
};